{
  "title": "swaggerを理解する（記事化予定）",
  "closed": false,
  "archived": false,
  "created_at": "2024-04-15",
  "comments": [
    {
      "author": "ryomaryoma1010",
      "created_at": "2024-04-15",
      "body_markdown": "# swaggerについて\nAPI仕様書を書くツール\nhttps://swagger.io/\n\n# 書き方\nおおよそswagger editorに倣って書く\nhttps://editor.swagger.io/\n\n## openapi\nopenapi形式のバージョンを書く\n\n```yaml\nopenapi: 3.0.3\n```\n\n## info\nAPIの情報をinfo内に書いていく\n### title\n\n```yaml\ntitle: Swagger Petstore - OpenAPI 3.0\n```\n\n### description\n概要を書く\n改行を含むテキストを書く場合はdescription: のあとに`|-`を書く\n\n```yaml\ndescription: |-\n    ここに概要を書く\n    マークダウン型式も対応している。\n    _italic_ **太字**\n\n    | **ヘッダー1** | **ヘッダー2** | **ヘッダー3** |\n    | ------------- | ------------- | ------------- |\n    | hoge          | hogehoge      | hogehogehoge  |\n    | fuga          | fuga          | fuga          |\n\n    ```\n    # コードブロック出力\n    echo \"Hello World!\"\n    ```\n    \n```\n\n### license\nライセンス情報はここにかく\n\n```yaml\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n### version\n提供するAPIのバージョン\n\n```yaml\nversion: 1.0.11\n```\n\n# 出力例\n\n![](https://storage.googleapis.com/zenn-user-upload/775d4adac700-20240415.png)\n\n# 詳細\n\nhttps://swagger.io/docs/specification/api-general-info/",
      "body_updated_at": "2024-04-15"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2024-04-15",
      "body_markdown": "## tags\nAPIエンドポイントをグルーピングする\n例ではそれぞれのエンドポイントを `pet`, `store`, `user`でグルーピングしている\n\n```yaml\ntags:\n    # tag名\n  - name: pet\n    # tagの概要\n    description: Everything about your Pets\n    # 外部ドキュメント\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\n  - name: user\n    description: Operations about user\n```\n\n## paths\nエンドポイントとその詳細をここに書く\n\n```yaml\npaths:\n  # エンドポイント\n  /pet:\n    # HTTPメソッド\n    put:\n      # エンドポイントが所属するタグ(上記で書いたもの)\n      tags:\n        - pet\n      # 簡単な説明\n      summary: Update an existing pet\n      # 詳細な説明\n      description: Update an existing pet by Id\n      # APIの名前\n      operationId: updatePet\n      # リクエストボディ\n      requestBody:\n        description: Update an existent pet in the store\n        content:\n          application/json:\n            # スキーマ\n            schema:\n              # components/schemas/Petを引用\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        # 必須かどうか\n        required: true\n      # レスポンス\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'          \n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '422':\n          description: Validation exception\n      # セキュリティについて\n      security:\n        - petstore_auth:\n            - write:pets\n            - read:pets\n```\n\n# 出力例\n![](https://storage.googleapis.com/zenn-user-upload/718a4f4426b5-20240415.png)\n\n# 詳細\nhttps://swagger.io/docs/specification/grouping-operations-with-tags",
      "body_updated_at": "2024-04-15"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2024-04-15",
      "body_markdown": "## components\nいくつかのエンドポイントのレスポンスで共通パラメータがある場合、そのレスポンスはcomponentsに格納することができる。\n格納したcomponentsは `$ref: #/components/...`で呼び出すことができる\n\n```yaml\ncomponents:\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        petId:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          example: approved\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n      xml:\n        name: order\n```\n\n\n# 詳細\nhttps://swagger.io/docs/specification/components/",
      "body_updated_at": "2024-04-15"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2024-04-22",
      "body_markdown": "# ファイルが冗長になってしまうのを防ぐためにファイルを分割する\n多くのAPIを作っていくと、1ファイルの文章量がめちゃくちゃ増えることになる。\nそこで、冗長化の回避と可読性の向上のためにファイル分割を行う。\n\n## ファイル分割のポイント\n### ファイルの分割をしすぎない\n例えば以下のコメントのようなファイル分割をしてしまうと、それぞれの詳細を見るために多くのリンクを踏まなければならず、可読性に欠けてしまう\n\n```yaml\nput:\n  # $refで以下をファイル分割\n    tags:\n      - pet\n    summary: Update an existing pet\n    description: Update an existing pet by Id\n    operationId: updatePet\n    requestBody:\n      # requestBodyを$refでファイル分割\n    responses:\n      # responseを$refでファイル分割\n    security:\n      # securityを$refでファイル分割\n```\n\nなので1つのファイルに何を見せたいかを意識しながら分割した。\n\n```yaml\nput:\n  tags:\n    - pet\n  summary: Update an existing pet\n  description: Update an existing pet by Id\n  operationId: updatePet\n  requestBody:\n    description: Update an existent pet in the store\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/Pet'\n      application/xml:\n        schema:\n          $ref: '#/components/schemas/Pet'\n      application/x-www-form-urlencoded:\n        schema:\n          $ref: '#/components/schemas/Pet'\n    required: true\n  responses:\n    '200':\n      description: Successful operation\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'          \n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n    '400':\n      description: Invalid ID supplied\n    '404':\n      description: Pet not found\n    '422':\n      description: Validation exception\n  security:\n    - petstore_auth:\n        - write:pets\n        - read:pets\n```\n\n### 分割したファイルの先頭に分割元の行をコメントでつける\nこの1行あるだけで何のファイルなのかさらにわかるかなと・・・\n\n```yaml\n# /pet:    <==これ\n  put:\n    tags:\n      - pet\n    summary: Update an existing pet\n    description: Update an existing pet by Id\n    operationId: updatePet\n    requestBody:\n    # 省略\n```\n\n\n## 最終的なディレクトリ構成\n以下が最終的なディレクトリ構成。\n省略のため、一部のディレクトリのみ展開。\n\n```shell\n$ tree swaggerEditor/\nswaggerEditor/\n├── components\n│   ├── requestBodies\n│   ├── schemas\n│   │   ├── address.yaml\n│   │   ├── api_response.yaml\n│   │   ├── category.yaml\n│   │   ├── customer.yaml\n│   │   ├── order.yaml\n│   │   ├── pet.yaml\n│   │   ├── tag.yaml\n│   │   └── user.yaml\n│   └── securitySchemes\n├── index.yaml\n└── paths\n    ├── pet\n    │   ├── pet.yaml\n    │   ├── pet_find_by_status.yaml\n    │   ├── pet_find_by_tags.yaml\n    │   ├── pet_pet_id.yaml\n    │   └── pet_pet_id_upload_image.yaml\n    ├── store\n    └── user\n```",
      "body_updated_at": "2024-04-22"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2024-04-22",
      "body_markdown": "ルートとなるindex.yamlはこんな感じになった\n\n```yaml\nopenapi: 3.0.3\ninfo:\n  title: Swagger Petstore - OpenAPI 3.0\n  description: |-\n    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\n    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n    You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n    \n    Some useful links:\n    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore3.swagger.io/api/v3\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\n  - name: user\n    description: Operations about user\n\n## paths以下をファイル分割\npaths:\n  /pet:\n    $ref: './paths/pet/pet.yaml'\n  /pet/findByStatus:\n    $ref: './paths/pet/pet_find_by_status.yaml'\n  /pet/findByTags:\n    $ref: './paths/pet/pet_find_by_tags.yaml'\n  /pet/{petId}:\n    $ref: './paths/pet/pet_pet_id.yaml'\n  /pet/{petId}/uploadImage:\n    $ref: './paths/pet/pet_pet_id_upload_image.yaml'\n\n  ## 以降、エンドポイント続く\n\n## components以下をファイル分割\ncomponents:\n  schemas:\n    Order:\n      $ref: './components/schemas/order.yaml'\n    Customer:\n      $ref: './components/schemas/customer.yaml'\n    Address:\n      $ref: './components/schemas/address.yaml'\n    Category:\n      $ref: './components/schemas/category.yaml'\n    User:\n      $ref: './components/schemas/user.yaml'\n    Tag:\n      $ref: './components/schemas/tag.yaml'\n    Pet:\n      $ref: './components/schemas/pet.yaml'\n    ApiResponse:\n      $ref: './components/schemas/api_response.yaml'\n  requestBodies:\n    ## 省略\n  securitySchemes:\n    ## 省略\n```"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2024-04-22",
      "body_markdown": "## スキーマを連結させたいときの書き方\nallOfを使う\nallOf以下で配列のように書く\n\n```yaml\nallOf: # 複数のスキーマを合体させる\n  - $ref: '#/components/schemas/Order'\n  - type: object\n    properties:\n        # 省略\n```\n\n```yaml:#/components/schemas/Order\nOrder:\n  type: object\n  properties:\n    id:\n      type: integer\n    # 省略\n```\n\n## 非推奨フラグ\ndeprecated: bool で非推奨フラグを設定できる。\n\n```yaml\npaths:\n  /pet:\n    post:\n      # true: 非推奨フラグon, false:非推奨フラグoff\n      deprecated: false\n      tags:\n        - pet\n      summary: Update an existing pet\n```\n\nなお、yamlファイルをpostmanにインポートするとき\nインポート設定の **Include deprecated properties** から、非推奨APIをドキュメントに表示するかしないかを選択することができる。\n\n![](https://storage.googleapis.com/zenn-user-upload/e022448453eb-20240422.png)\n*Postmanのインポート設定*",
      "body_updated_at": "2024-04-22"
    }
  ]
}