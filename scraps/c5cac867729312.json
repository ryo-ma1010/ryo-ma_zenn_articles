{
  "title": "PlayWright動かせるようになるまで",
  "closed": true,
  "archived": false,
  "created_at": "2023-04-14",
  "comments": [
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-04-14",
      "body_markdown": "環境\nWindows11\nWSL + AlmaLinux9\n\n```\n$ sudo yum install nodejs\n```\n\n```\n$ npm init playwright@latest\nNeed to install the following packages:\ncreate-playwright@1.17.127\nOk to proceed? (y) y\nGetting started with writing end-to-end tests with Playwright:\nInitializing project in '.'\n✔ Do you want to use TypeScript or JavaScript? · TypeScript\n✔ Where to put your end-to-end tests? · tests\n✔ Add a GitHub Actions workflow? (y/N) · false\n✔ Install Playwright browsers (can be done manually via 'npx playwright install')? (Y/n) · true\n✔ Install Playwright operating system dependencies (requires sudo / root - can be done manually via 'sudo npx playwright install-deps')? (y/N) · false\nInitializing NPM project (npm init -y)…\n```",
      "body_updated_at": "2023-04-14"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-04-14",
      "body_markdown": "PlayWright、AlmaLinux(CentOS)では使えない問題\n\n```\n$ npx playwright install\nBEWARE: your OS is not officially supported by Playwright; downloading fallback build.\nBEWARE: your OS is not officially supported by Playwright; downloading fallback build.\nBEWARE: your OS is not officially supported by Playwright; downloading fallback build.\nBEWARE: your OS is not officially supported by Playwright; downloading fallback build.\n```\n\nhttps://github.com/microsoft/playwright/issues/15124\nhttps://github.com/microsoft/playwright/issues/12548",
      "body_updated_at": "2023-04-14"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-04-14",
      "body_markdown": "AlmaLinuxからUbuntuに変更して再度ためす\n実際に触ってみると、どうやって使ったらいいかいまいちつかめていない"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-04-14",
      "body_markdown": "Ubuntuいれたらできた\n\n```\n$ npm init playwright@latest\n$ npx playwright install\n```\n\nテストコード作ってみようと思って下記コマンド叩いたら\n```\n$ npx playwright codegen http://example.com\n```\n\n\nplaywright install-depsをいれろって怒られたから下記コマンド実行\n```\n$ sudo npx playwright install-deps\n```\n\n再度下記を実行したらテストコードつくれた\n```\n$ npx playwright codegen http://example.com\n```\n"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-04-17",
      "body_markdown": "```\n$ npx playwright\nUsage: npx playwright [options] [command]\n\nOptions:\n  -V, --version                          output the version number\n  -h, --help                             display help for command\n\nCommands:\n  open [options] [url]                   open page in browser specified via -b, --browser\n  codegen [options] [url]                open page and generate code for user actions\n  install [options] [browser...]         ensure browsers necessary for this version of Playwright are installed\n  install-deps [options] [browser...]    install dependencies necessary to run browsers (will ask for sudo permissions)\n  cr [options] [url]                     open page in Chromium\n  ff [options] [url]                     open page in Firefox\n  wk [options] [url]                     open page in WebKit\n  screenshot [options] <url> <filename>  capture a page screenshot\n  pdf [options] <url> <filename>         save page as pdf\n  show-trace [options] [trace...]        show trace viewer\n  test [options] [test-filter...]        run tests with Playwright Test\n  show-report [options] [report]         show HTML report\n  help [command]                         display help for command\n```\n\n```\n$ npx playwright help test\nUsage: npx playwright test [options] [test-filter...]\n\nrun tests with Playwright Test\n\nOptions:\n  --browser <browser>          Browser to use for tests, one of \"all\", \"chromium\", \"firefox\" or \"webkit\" (default: \"chromium\")\n  -c, --config <file>          Configuration file, or a test directory with optional \"playwright.config.ts\"/\"playwright.config.js\"/\"playwright.config.mjs\"\n  --debug                      Run tests with Playwright Inspector. Shortcut for \"PWDEBUG=1\" environment variable and \"--timeout=0 --max-failures=1 --headed --workers=1\" options\n  --forbid-only                Fail if test.only is called (default: false)\n  --fully-parallel             Run all tests in parallel (default: false)\n  -g, --grep <grep>            Only run tests matching this regular expression (default: \".*\")\n  --global-timeout <timeout>   Maximum time this test suite can run in milliseconds (default: unlimited)\n  -gv, --grep-invert <grep>    Only run tests that do not match this regular expression\n  --headed                     Run tests in headed browsers (default: headless)\n  --ignore-snapshots           Ignore screenshot and snapshot expectations\n  -j, --workers <workers>      Number of concurrent workers or percentage of logical CPU cores, use 1 to run in a single worker (default: 50%)\n  --list                       Collect all the tests and report them, but do not run\n  --max-failures <N>           Stop after the first N failures\n  --no-deps                    Do not run project dependencies\n  --output <dir>               Folder for output artifacts (default: \"test-results\")\n  --pass-with-no-tests         Makes test run succeed even if no tests were found\n  --project <project-name...>  Only run tests from the specified list of projects (default: run all projects)\n  --quiet                      Suppress stdio\n  --repeat-each <N>            Run each test N times (default: 1)\n  --reporter <reporter>        Reporter to use, comma-separated, can be \"list\", \"line\", \"dot\", \"json\", \"junit\", \"null\", \"github\", \"html\" (default: \"list\")\n  --retries <retries>          Maximum retry count for flaky tests, zero for no retries (default: no retries)\n  --shard <shard>              Shard tests and execute only the selected shard, specify in the form \"current/all\", 1-based, for example \"3/5\"\n  --timeout <timeout>          Specify test timeout threshold in milliseconds, zero for unlimited (default: 30000)\n  --trace <mode>               Force tracing mode, can be \"on\", \"off\", \"on-first-retry\", \"retain-on-failure\"\n  -u, --update-snapshots       Update snapshots with actual results (default: only create missing snapshots)\n  --ui                         Run tests in interactive UI mode\n  -x                           Stop after the first failure\n  -h, --help                   display help for command\n\nArguments [test-filter...]:\n  Pass arguments to filter test files. Each argument is treated as a regular expression. Matching is performed against the absolute file paths.\n\nExamples:\n  $ npx playwright test my.spec.ts\n  $ npx playwright test some.spec.ts:42\n  $ npx playwright test --headed\n  $ npx playwright test --project=webkit\n```\n\n```\n$ npx playwright help screenshot\nUsage: npx playwright screenshot [options] <url> <filename>\n\ncapture a page screenshot\n\nOptions:\n  --wait-for-selector <selector>  wait for selector before taking a screenshot\n  --wait-for-timeout <timeout>    wait for timeout in milliseconds before taking a screenshot\n  --full-page                     whether to take a full page screenshot (entire scrollable area)\n  -b, --browser <browserType>     browser to use, one of cr, chromium, ff, firefox, wk, webkit (default: \"chromium\")\n  --block-service-workers         block service workers\n  --channel <channel>             Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc\n  --color-scheme <scheme>         emulate preferred color scheme, \"light\" or \"dark\"\n  --device <deviceName>           emulate device, for example  \"iPhone 11\"\n  --geolocation <coordinates>     specify geolocation coordinates, for example \"37.819722,-122.478611\"\n  --ignore-https-errors           ignore https errors\n  --load-storage <filename>       load context storage state from the file, previously saved with --save-storage\n  --lang <language>               specify language / locale, for example \"en-GB\"\n  --proxy-server <proxy>          specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\"\n  --proxy-bypass <bypass>         comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\"\n  --save-har <filename>           save HAR file with all network activity at the end\n  --save-har-glob <glob pattern>  filter entries in the HAR by matching url against this glob pattern\n  --save-storage <filename>       save context storage state at the end, for later use with --load-storage\n  --timezone <time zone>          time zone to emulate, for example \"Europe/Rome\"\n  --timeout <timeout>             timeout for Playwright actions in milliseconds, no timeout by default\n  --user-agent <ua string>        specify user agent string\n  --viewport-size <size>          specify browser viewport size in pixels, for example \"1280, 720\"\n  -h, --help                      display help for command\n\nExamples:\n\n  $ screenshot -b webkit https://example.com example.png\n```\n\n```\n$ npx playwright codegen --help\nUsage: npx playwright codegen [options] [url]\n\nopen page and generate code for user actions\n\nOptions:\n  -o, --output <file name>        saves the generated script to a file\n  --target <language>             language to generate, one of javascript, playwright-test, python, python-async, python-pytest, csharp, csharp-mstest, csharp-nunit, java (default:\n                                  \"playwright-test\")\n  --save-trace <filename>         record a trace for the session and save it to a file\n  -b, --browser <browserType>     browser to use, one of cr, chromium, ff, firefox, wk, webkit (default: \"chromium\")\n  --block-service-workers         block service workers\n  --channel <channel>             Chromium distribution channel, \"chrome\", \"chrome-beta\", \"msedge-dev\", etc\n  --color-scheme <scheme>         emulate preferred color scheme, \"light\" or \"dark\"\n  --device <deviceName>           emulate device, for example  \"iPhone 11\"\n  --geolocation <coordinates>     specify geolocation coordinates, for example \"37.819722,-122.478611\"\n  --ignore-https-errors           ignore https errors\n  --load-storage <filename>       load context storage state from the file, previously saved with --save-storage\n  --lang <language>               specify language / locale, for example \"en-GB\"\n  --proxy-server <proxy>          specify proxy server, for example \"http://myproxy:3128\" or \"socks5://myproxy:8080\"\n  --proxy-bypass <bypass>         comma-separated domains to bypass proxy, for example \".com,chromium.org,.domain.com\"\n  --save-har <filename>           save HAR file with all network activity at the end\n  --save-har-glob <glob pattern>  filter entries in the HAR by matching url against this glob pattern\n  --save-storage <filename>       save context storage state at the end, for later use with --load-storage\n  --timezone <time zone>          time zone to emulate, for example \"Europe/Rome\"\n  --timeout <timeout>             timeout for Playwright actions in milliseconds, no timeout by default\n  --user-agent <ua string>        specify user agent string\n  --viewport-size <size>          specify browser viewport size in pixels, for example \"1280, 720\"\n  -h, --help                      display help for command\n\nExamples:\n\n  $ codegen\n  $ codegen --target=python\n  $ codegen -b webkit https://example.com\n```"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-04-17",
      "body_markdown": "めちゃくちゃ参考になってるから消えないでほしい\n\nhttps://minerva.mamansoft.net/%F0%9F%93%98Articles/%F0%9F%93%983%E5%B9%B4%E7%9B%AE%E3%80%813%E5%9B%9E%E7%9B%AE%E3%81%AEPlaywright%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-04-17",
      "body_markdown": "張るの忘れたけど公式のドキュメント\n\nhttps://playwright.dev/dotnet/docs/intro"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-05-12",
      "body_markdown": "対象となるサイトはECサイト\n\nあれからコードとリファレンスを熟読したおかげで、ある程度知見を深めることができて、\n無事自動テストのコードを作ることができた。\n\n## 今後試したいこと\nテストに使用するURLやログインアカウントが直書きなので、外部ファイルで管理できるようにしたい。\nただ、そのためには会社で使う前提の話になると思うので\nそうでない限りは個人用としてこのレベルで問題ないのかもしれない"
    },
    {
      "author": "ryomaryoma1010",
      "created_at": "2023-05-24",
      "body_markdown": "## 最近知ったこと\n\nPlayWright的には非推奨であり、テストごとに独立であるべき、とのことだが\nECサイトのテストをするにあたり、カートにいれるテスト、そこから購入完了までのテストといった独立してるけど通しでテストできるといいよなあと思うことがあったので\nその方法を調べてみた。\n\n### Sirial mode\n\nシリアルモードを宣言することで、ファイル内の複数のテストが順番通りに実行される。\n\nhttps://playwright.dev/docs/test-retries#serial-mode\n\n```ts\n// Annotate entire file as serial.\ntest.describe.configure({ mode: 'serial' });\n```\n\n### テスト間でブラウザを共有したい\n\n1つのテストが始まると、ブラウザが開いて、テスト終了でブラウザが閉じるが、\n複数テストを順番で通しで行うなら、テスト間でブラウザは開いたままでいたい。\nまた、ページの状態も維持したい。\n\nhttps://playwright.dev/docs/test-retries#serial-mode\n\nそういったときはリンクに書かれているような、下記コードを記述する。\n\n```ts\nimport { test, Page } from '@playwright/test';\n\ntest.describe.configure({ mode: 'serial' });\n\nlet page: Page;\n\ntest.beforeAll(async ({ browser }) => {\n  page = await browser.newPage();\n});\n\ntest.afterAll(async () => {\n  await page.close();\n});\n\ntest('runs first', async () => {\n  await page.goto('https://playwright.dev/');\n});\n\ntest('runs second', async () => { \n  await page.getByText('Get Started').click();\n});\n```\n\nテストを実行する前にPageオブジェクトを宣言することで、テスト間でページの状態を維持する。\nテストが始まる前にブラウザを立ち上げてそのブラウザをPageオブジェクトに格納\nテストが終了したら、ブラウザは閉じる。",
      "body_updated_at": "2023-05-24"
    }
  ]
}